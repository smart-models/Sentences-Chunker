# Ultra-lightweight GPU Dockerfile to solve disk space issues
FROM nvidia/cuda:12.1.0-runtime-ubuntu22.04

# Prevent apt-get prompts and set aggressive cleanup
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install minimal Python and cleanup immediately
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.10 \
    python3.10-venv \
    python3-pip \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/cache/apt/*

# Create venv and install dependencies in single layer
RUN python3.10 -m venv /opt/venv \
    && /opt/venv/bin/pip install --upgrade pip wheel setuptools \
    && /opt/venv/bin/pip cache purge

# Set PATH
ENV PATH="/opt/venv/bin:$PATH"

WORKDIR /app

# Copy requirements and install with aggressive cleanup
COPY docker/requirements-base.txt .
COPY docker/requirements-gpu.txt .

# Install dependencies with immediate cleanup in single RUN to minimize layers
RUN pip install --no-cache-dir -r requirements-gpu.txt \
    && pip cache purge \
    && find /opt/venv -name "*.pyc" -delete \
    && find /opt/venv -name "__pycache__" -type d -exec rm -rf {} + || true \
    && find /opt/venv -name "*.pyo" -delete \
    && find /opt/venv -name "tests" -type d -exec rm -rf {} + || true \
    && find /opt/venv -name "test" -type d -exec rm -rf {} + || true \
    && rm -rf /tmp/* /var/tmp/* \
    && rm -f requirements-*.txt

# Copy application code
COPY sentences_chunker.py .

# Create directories and user in single layer
RUN mkdir -p /app/models /app/logs \
    && groupadd -r appgroup \
    && useradd -r -g appgroup -m -d /home/appuser -s /bin/bash appuser \
    && chown -R appuser:appgroup /app /opt/venv /home/appuser \
    && chmod -R 755 /app \
    && chmod -R u+w /app/logs /app/models

# Set final environment
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility \
    NVIDIA_VISIBLE_DEVICES=all \
    TOKENIZERS_PARALLELISM=false

USER appuser

EXPOSE 8000

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/ || exit 1

CMD ["uvicorn", "sentences_chunker:app", \
    "--host", "0.0.0.0", \
    "--port", "8000", \
    "--workers", "1", \
    "--limit-concurrency", "50"]